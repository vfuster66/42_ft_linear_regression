import json
import numpy as np
import matplotlib.pyplot as plt
from colorama import Fore, Style, init

# Initialisation de colorama
init(autoreset=True)


def load_model(filename="model.json"):
    """Charge les param√®tres du mod√®le et les valeurs de normalisation."""
    try:
        with open(filename, "r") as f:
            model = json.load(f)
        return model
    except FileNotFoundError:
        print(f"{Fore.RED}‚ùå Erreur : mod√®le non trouv√©. "
              f"Ex√©cutez d'abord `train.py`." f"{Style.RESET_ALL}")
        exit(1)


def load_data(filename="data.csv"):
    """Charge les donn√©es depuis un fichier CSV."""
    data = np.loadtxt(filename, delimiter=',', skiprows=1)
    mileage, price = data[:, 0], data[:, 1]
    return mileage, price


def mean_squared_error(mileage, price, theta0, theta1):
    """Calcule l'erreur quadratique moyenne (MSE)
    entre les prix r√©els et estim√©s."""
    predictions = theta0 + theta1 * mileage
    mse = np.mean((predictions - price) ** 2)
    return mse


def plot_residuals(mileage, price, theta0, theta1):
    """G√©n√®re et sauvegarde un graphique des r√©sidus."""
    predictions = theta0 + theta1 * mileage
    residuals = price - predictions

    plt.figure(figsize=(8, 6))
    plt.scatter(predictions, residuals, color='purple')
    plt.axhline(y=0, color='black', linestyle='--')
    plt.xlabel('Prix pr√©dits (‚Ç¨)')
    plt.ylabel('R√©sidus (‚Ç¨)')
    plt.title('Graphique des r√©sidus')
    plt.grid(True)
    plt.savefig('residuals_plot.png')


def r_squared(mileage, price, theta0, theta1):
    """Calcule le coefficient de d√©termination (R¬≤)."""
    predictions = theta0 + theta1 * mileage
    ss_total = np.sum((price - np.mean(price)) ** 2)
    ss_residual = np.sum((price - predictions) ** 2)
    r_squared = 1 - (ss_residual / ss_total)
    return r_squared


def plot_data_distribution(mileage, price):
    """Boxplot des donn√©es initiales (kilom√©trage et prix)."""
    plt.figure(figsize=(8, 6))
    plt.boxplot(
        [mileage, price],
        tick_labels=['Kilom√©trage (km)', 'Prix (‚Ç¨)'],
        vert=False
    )
    plt.title('Distribution initiale des donn√©es (Boxplot)')
    plt.grid(True)
    plt.savefig('data_distribution.png')
    print(f"{Fore.CYAN}üì¶ Distribution initiale sauvegard√©e sous "
          f"'data_distribution.png'{Style.RESET_ALL}")


def plot_error_distribution(mileage, price, theta0, theta1):
    """Affiche la distribution des erreurs de pr√©diction."""
    predictions = theta0 + theta1 * mileage
    errors = price - predictions

    plt.figure(figsize=(8, 6))
    plt.hist(errors, bins=10, color='purple', edgecolor='black')
    plt.xlabel('Erreur de pr√©diction (‚Ç¨)')
    plt.ylabel('Nombre de v√©hicules')
    plt.title('Distribution des erreurs de pr√©diction')
    plt.grid(True)
    plt.savefig('error_distribution.png')


def plot_mileage_distribution(mileage):
    """Histogramme montrant la r√©partition du kilom√©trage."""
    plt.figure(figsize=(8, 6))
    plt.hist(mileage, bins=10, color='green', edgecolor='black')
    plt.xlabel('Kilom√©trage (km)')
    plt.ylabel('Nombre de v√©hicules')
    plt.title('Distribution du kilom√©trage')
    plt.grid(True)
    plt.savefig('mileage_distribution.png')


if __name__ == "__main__":
    print(f"{Fore.CYAN}üìÇ Chargement du mod√®le et des donn√©es..."
          f"{Style.RESET_ALL}")

    model = load_model()
    mileage, price = load_data()

    theta0 = model["theta0"]
    theta1 = model["theta1"]

    mse = mean_squared_error(mileage, price, theta0, theta1)

    print(f"{Fore.YELLOW}üìè Erreur quadratique moyenne (MSE) : "
          f"{Fore.MAGENTA}{mse:.2f}{Style.RESET_ALL}")

    # Visualisation des r√©sidus
    plot_residuals(mileage, price, theta0, theta1)
    print(f"{Fore.CYAN}üìâ Graphique des r√©sidus sauvegard√© "
          f"(residuals_plot.png){Style.RESET_ALL}")

    # Distribution des erreurs
    plot_error_distribution(mileage, price, theta0, theta1)
    print(f"{Fore.CYAN}üìä Distribution des erreurs sauvegard√©e sous "
          f"'error_distribution.png'{Style.RESET_ALL}")

    # Graphiques bonus suppl√©mentaires
    plot_data_distribution(mileage, price)
    print(f"{Fore.CYAN}üìà Distribution initiale des donn√©es sauvegard√©e sous "
          f"'data_distribution.png'{Style.RESET_ALL}")

    plot_mileage_distribution(mileage)
    print(f"{Fore.CYAN}üöó Distribution du kilom√©trage sauvegard√©e sous "
          f"'mileage_distribution.png'{Style.RESET_ALL}")

    # Calcul du R¬≤
    r2 = r_squared(mileage, price, theta0, theta1)
    print(f"{Fore.YELLOW}üîç R¬≤ : {Fore.MAGENTA}{r2:.4f}{Style.RESET_ALL}")
